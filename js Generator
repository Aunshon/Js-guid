/*
  Generator functions--
  While custom iterators are a useful tool, their creation requires careful programming due to the need to explicitly maintain their 
  internal state. Generator functions provide a powerful alternative: they allow you to define an iterative algorithm by writing a 
  single function whose execution is not continuous. Generator functions are written using the function* syntax.

  When called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a 
  Generator. When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the 
  yield keyword.

  The function can be called as many times as desired, and returns a new Generator each time. Each Generator may only be iterated 
  once.
*/

// bsdic syntex of a generator function :

function* myGeneratorFun() {                   // this funciton is like all other funciton but there is an * after funciton keyword
  yield "Hi...";                               // yield id mendatory in generator function and it returns what is done after it
  yield "1+1+3";
  yield "true";
}

let variable = myGeneratorFun();

conlole.log(variable);                        // this line is going to show myGeneratorÂ {<suspended>} to access we have to use next() fuction
console.log(variable.next());                 // this will show an object of done and value
console.log(variable.next().value);           // next().value is going to show the value . for ex: Hi...
console.log(variable.next().done);            // done stands for if there are any more iterator if true than no iterator otherwise false means there are value
//.......................................


/*
  Another Example :
*/

function* myGenerator(cart) {
    let length = cart.length;
    for (let i = 0; i < length; i++) {
        yield cart[i];
    }
}

let products = ['product1', 'product2', 'product3', 'product4'];

let variable = myGenerator(products);
console.log(variable.next());
console.log(variable.next());
console.log(variable.next());
console.log(variable.next());
console.log(variable.next());

























